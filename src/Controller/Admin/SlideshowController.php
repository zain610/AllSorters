<?php
namespace App\Controller\Admin;

use App\Controller\AppController;

/**
 * Slideshow Controller
 *
 * @property \App\Model\Table\SlideshowTable $Slideshow
 *
 * @method \App\Model\Entity\Slideshow[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class SlideshowController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {

        $this->loadComponent('Paginator');

        $Slideshow = $this->Paginator->paginate(
            $this->Slideshow->find('all')->order('image.name')->contain(['image'])
        );
        $this->layout ='admin';
        $this->set('data', $this->request->getSession()->read('data'));

        $this->set('data', $this->request->getSession()->read('data'));

        $this->set(compact('Slideshow'));


    }

    /**
     * View method
     *
     * @param string|null $id Slideshow id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $slideshow = $this->Slideshow->get($id, [
            'contain' => ['Image']
        ]);

        $this->set('slideshow', $slideshow);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $this->layout ='admin';


        $slideshow = $this->Slideshow->newEntity();
        if ($this->request->is('post')) {

            $slideshow = $this->Slideshow->patchEntity($slideshow, $this->request->getData());
            $data = $this->request->getData('checkbox');

            if ($this->Slideshow->save($slideshow)) {
                $this->Flash->success(__('The slideshow has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The slideshow could not be saved. Please, try again.'));
        }
        $image = $this->Slideshow->Image->find('all');
        $this->set(compact('slideshow', 'image'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Slideshow id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $slideshow = $this->Slideshow->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $slideshow = $this->Slideshow->patchEntity($slideshow, $this->request->getData());
            if ($this->Slideshow->save($slideshow)) {
                $this->Flash->success(__('The slideshow has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The slideshow could not be saved. Please, try again.'));
        }
        $image = $this->Slideshow->Image->find('list', ['limit' => 200]);
        $this->set(compact('slideshow', 'image'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Slideshow id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $slideshow = $this->Slideshow->get($id);
        if ($this->Slideshow->delete($slideshow)) {
            $this->Flash->success(__('The slideshow has been deleted.'));
        } else {
            $this->Flash->error(__('The slideshow could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function insertImage($id = null){
        $slideshow = $this->Slideshow->get(1, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $slideshow = $this->Slideshow->patchEntity($slideshow, $this->request->getData());

            if ($this->Slideshow->save($slideshow)) {
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The slideshow could not be saved. Please, try again.'));
        }

    }
    public function getSelectedImages() {
        $this->request->allowMethod('post');
        // get data from form
        $formData = $this->request->getData();
        $image_list = [];
        //get the keys of the data = ids
        $data_keys = array_keys($formData); // [message, 1,2,3,4,5,6]
        //iterate over the keys list and foreach key, find the value is 1, then add it to the senders list
        foreach($data_keys as $key) {
            if($key !== "Captions") {
                if($formData[$key]) {
                    array_push($image_list, $key);
                }
            }
        }
        $this->request->getSession()->write('data', $image_list );
        return $this->redirect(['action' => 'index']);
    }
}
