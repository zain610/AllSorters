<?php
namespace App\Controller\admin;

use App\Controller\AppController;

/**
 * Product Controller
 *
 * @property \App\Model\Table\ProductTable $Product
 *
 * @method \App\Model\Entity\Product[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ProductController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->layout ='admin';
        $this->set('title', 'E-Commerce');

    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {

        $this->paginate = [
            'contain' => ['Image']
        ];
        $products = $this->paginate($this->Product->find('all'));

        $this->set(compact('products'));
    }

    /**
     * View method
     *
     * @param string|null $id Product id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $product = $this->Product->get($id, [
            'contain' => ['Image']
        ]);

        $this->set('product', $product);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $product = $this->Product->newEntity();
        if ($this->request->is('post')) {
            $product = $this->Product->patchEntity($product, $this->request->getData());
            $data = $this->request->getData('checkbox');
            if(!empty($data[0])){
                for($i=0;$i<count($data);$i++){
                    if($data[$i]!=0){
                        $index = $data[$i];
                    }
                }
                $product->Image_id = $index;
            }
            $product->achieved = 0;
            if ($this->Product->save($product)) {
                $this->Flash->success(__('The product has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The product could not be saved. Please, try again.'));
        }
        $image = $this->Product->Image->find('list', ['limit' => 200]);
        $img_ob = $this->Product->Image->find('all');
        $this->set(compact('product', 'image','img_ob'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Product id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $product = $this->Product->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = $this->request->getData('checkbox');
            $product = $this->Product->patchEntity($product, $this->request->getData());
            if(!empty($data)){
                for($i=0;$i<count($data);$i++){
                    if($data[$i]!=0){
                        $product->Image_id = $data[$i];
                    }
                }

            }
            if ($this->Product->save($product)) {
                $this->Flash->success(__('The product has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The product could not be saved. Please, try again.'));
        }
        $image = $this->Product->Image->find('list', ['limit' => 200]);
        $img_ob = $this->Product->Image->find('all');
        $this->set(compact('product', 'image','img_ob'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Product id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $product = $this->Product->get($id);
        if ($this->Product->delete($product)) {
            $this->Flash->success(__('The product has been deleted.'));
        } else {
            $this->Flash->error(__('The product could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function archive($id = null)
    {
        $product = $this->Product->get($id);
        if ($product == null) {
            throw new NotFoundException();
        }

        // If an article is archived, it is "unpublished" as well
        $product->achieved = 1;

        if ($this->Product->save($product)) {
            $this->Flash->success(__('Your Blog Post has been archived.'));
        } else {
            $this->Flash->error(__('Unable to archive your Blog Post.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function restore($id = null)
    {
        $product = $this->Product->get($id);
        if ($product == null) {
            throw new NotFoundException();
        }

        $product->achieved = 0;


        if ($this->Product->save($product)) {
            $this->Flash->success(__('Your Blog Post has been restored.'));
        } else {
            $this->Flash->error(__('Unable to restore your Blog Post.'));
        }

        return $this->redirect(['action' => 'index']);
    }


}
