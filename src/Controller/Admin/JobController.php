<?php
namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\ORM\TableRegistry;

/**
 * Job Controller
 *
 * @property \App\Model\Table\JobTable $Job
 *
 * @method \App\Model\Entity\Job[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class JobController extends AppController
{
    public function initialize()
    {

        parent::initialize(); // TODO: Change the autogenerated stub
        $this->layout = 'admin';
        $this->loadModel('Job');

    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Service']
        ];
        $job = $this->paginate($this->Job->find('all')->contain([])->orderAsc('Commence_Date'));


        $this->set(compact('job'));
    }

    /**
     * View method
     *
     * @param string|null $id Job id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $job = $this->Job->get($id, [
            'contain' => ['Service']
        ]);

        $this->set('job', $job);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $job = $this->Job->newEntity();
        if ($this->request->is('post')) {
            $job = $this->Job->patchEntity($job, $this->request->getData());
            if ($this->Job->save($job)) {
                $this->Flash->success(__('The job has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The job could not be saved. Please, try again.'));
        }
        $service = $this->Job->Service->find('list', [
            'valueField'=>'Service_Title'
        ]);

        $this->set(compact('job', 'service'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Job id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $job = $this->Job->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $job = $this->Job->patchEntity($job, $this->request->getData());
            if ($this->Job->save($job)) {
                $this->Flash->success(__('The job has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The job could not be saved. Please, try again.'));
        }
        $service = $this->Job->Service->find('list', ['valueField'=>'Service_Title']);
        $this->set(compact('job', 'service'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Job id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $job = $this->Job->get($id);
        if ($this->Job->delete($job)) {
            $this->Flash->success(__('The job has been deleted.'));
        } else {
            $this->Flash->error(__('The job could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
    public function archive($id = null)
    {
        $job = $this->Job->get($id);
        if ($job == null) {
            throw new NotFoundException();
        }

        $job->job_status = 1;


        if ($this->Job->save($job)) {
            $this->Flash->success(__('Your Job has been archived.'));
        } else {
            $this->Flash->error(__('Unable to archive your Job.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function restore($id = null)
    {
        $job = $this->Job->get($id);
        if ($job == null) {
            throw new NotFoundException();
        }


        $job->job_status = 0;


        if ($this->Job->save($job)) {
            $this->Flash->success(__('Your Job has been archived.'));
        } else {
            $this->Flash->error(__('Unable to archive your Job.'));
        }

        return $this->redirect(['action' => 'archiveIndex']);
    }
    public function archiveIndex()
    {
        $archivedJobs = TableRegistry::get('Job')->find('all')->where(['job.job_status' => 1])->contain([])->orderAsc('Commence_Date');
        $this->set('archivedJobs', $this->paginate($archivedJobs));
    }
}
