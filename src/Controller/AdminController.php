<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\Role;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Mailer\Email;
use Cake\Mailer\TransportFactory;
use Cake\Utility\Security;
use Cake\ORM\TableRegistry;
use Cake\Routing\Router;

/**
 * Admin Controller
 *
 * @property \App\Model\Table\AdminTable $Admin
 *
 * @method \App\Model\Entity\Admin[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class AdminController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Admin');
        $this->loadModel('Request');
        $this->loadModel('BlogPost');
        $this->loadModel('post_comment');
        $this->loadModel('Review');
        $this->loadModel('Job');
        $this->loadModel('Webpages');

    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $admin = $this->paginate($this->Admin);
        $request = $this->paginate($this->Request);
        $comments = $this->Paginator->paginate($this->post_comment->find('all')->contain('BlogPost'));
        $unres_request = $this->Request->find('all')->where(['Request.Response IS NULL']);
        $count_request = $unres_request->count();
        $count_comment = $comments->count();
        $count_blog = $this->BlogPost->find('all')->count();
        $count_review = $this->Review->find('all')->count();
        $count_job = $this->Job->find('all')->where(['!job_status'])->count();
        $this->layout ='admin';
        $this->set(compact('admin','request','comments','count_comment','count_request'));
        $this->set(compact('count_blog','count_review','count_job'));
        $webpages = $this->Webpages->find('all');
        $this->set(compact('webpages'));
        $this->set('title', 'Dashboard');

    }

    /**
     * View method
     *
     * @param string|null $id Admin id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $admin = $this->Admin->get($id, [
            'contain' => []
        ]);
//        $admin = $this->paginate($this->Admin);

        $this->set('admin', $admin);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $admin = $this->Admin->newEntity();
        if ($this->request->is('post')) {
            $admin = $this->Admin->patchEntity($admin, $this->request->getData());
            if ($this->Admin->save($admin)) {
                $this->Flash->success(__('The admin has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The admin could not be saved. Please, try again.'));
        }

        $this->set(compact('admin'));
    }

    public function changeprofile()
    {
        $this->layout = 'admin';
        $user_id = $this->Auth->user()['id'];
        $admin = $this->Admin->find()->where('Admin.id ='.$user_id)->toArray()[0];

        if ($this->request->is(['patch', 'post', 'put'])) {
            $Confirmed_PW = $this->request->getData('Confirm_Password');

            $admin = $this->Admin->patchEntity($admin, $this->request->getData());
            if ((new DefaultPasswordHasher)->check($Confirmed_PW, $admin->password)) {
                $admin->username = $this->request->getData('username');
                $admin->email = $this->request->getData('email');
                $admin->phone = $this->request->getData('phone');
                if ($this->Admin->save($admin)) {
                    $this->Flash->success(__('Profile has been changed!'));
                } else {
                    debug($admin);
                    $this->Flash->error(__('Profile cannot be changed, please try again.'));
                }
            }
            else {
                $Confirmed_PW = $this->request->getData('Confirm_Your_Password');
                $this->Flash->error(__('Please enter the correct current password.'));
            }
        }
        $this->set(compact('admin'));
        $this->set('title', 'Profile');
    }


    public function changepassword()
    {
        $this->layout = 'admin';
        $user_id = $this->Auth->user()['id'];
        $admin = $this->Admin->find()->where('Admin.id ='.$user_id)->toArray()[0];

        if ($this->request->is(['patch', 'post', 'put'])) {
            $Entered_PW = $this->request->getData('Enter_Your_Passward');
            $Comfirm_PW = $this->request->getData('Confirm_Password');
            $New_PW = $this->request->getData('New_Password');

            $admin = $this->Admin->patchEntity($admin, $this->request->getData());
            if ((new DefaultPasswordHasher)->check($Entered_PW, $admin['password'])) {
                if (strlen($New_PW) >= 8) {
                    if ($New_PW == $Comfirm_PW) {
                        $admin->password = $New_PW;
                        if ($this->Admin->save($admin)) {
                            $this->Flash->success(__('Password has been changed!'));
                        } else {
                            $this->Flash->error(__('Password cannot be changed, please try again.'));
                        }
                    } else {
                        $this->Flash->error(__('Comfirm Password must be same, please try again.'));
                    }
                } else {
                    $this->Flash->error(__('Password must have more than 8 digits.'));
                }

            } else {
                $this->Flash->error(__('Please enter the correct current password.'));
            }

        }

        $this->set(compact('admin'));
        $this->set('title', 'Change Password');




    }

    /**
     * Delete method
     *
     * @param string|null $id Admin id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */


    public function forgotpassword(){
        if($this->request->is('post')){
            $myemail = $this->request->getData('email');
            $mytoken = Security::hash(Security::randomBytes(25));

            $adminTable = TableRegistry::get('admin');

            $admin = $adminTable->find('all')->where(['email'=>$myemail])->first();
            if(is_null($admin)){
                $this->Flash->error('Could not find the email.');
            }
            else{
                $admin->password = '';
                $admin->token = $mytoken;

                if($adminTable->save($admin)){
                    $this->Flash->success('Reset password link has been sent to your email ('.$myemail.'), please check your index');
                    $email = new Email('default');
                    $url = Router::Url(['controller'=>'admin','action'=>'resetpassword'],true).'/'.$mytoken;
                    $email->setFrom(['allsortMary@gmail.com' => 'AllSorters'])
                        ->setTo($myemail)
                        ->setTemplate('default')
//                            ->setViewVars(['title' => "Reset Password", 'content'=> 'Hello '.$myemail.' Please click link below to reset your password: http://localhost:8765/admin/resetpassword/'.$mytoken])
                        ->setViewVars(['title' => "Reset Password", 'content'=> 'Hello '.$myemail.' Please click link below to reset your password: '.$url])
                        ->setSubject("Please confirm your reset password");
                    $email->send();
                }
            }

        }
    }

    public function resetpassword($token){
        if($this->request->is('post')){
            $adminTable = TableRegistry::get('admin');
            $admin = $adminTable->find('all')->where(['token'=>$token])->first();
            $this->request->is('post');
            $mypass = $this->request->getData(' ');
            if(strlen($mypass)<8){
                $this->Flash->error('Password must be at least 8 digits.');
            }
            else{
                $admin->password = $mypass;
                if($adminTable->save($admin)){
                    return $this->redirect(['action'=>'login']);
                }
            }
        }
    }


    public function login(){
        if($this->request->is('post')){
            $user= $this->Auth->identify();
            if($user){
                $this->Auth->setUser($user);
                //if the user is logged in, display the admin homepage
                return $this->redirect(['controller' => 'Admin', 'action' => 'index']);
            }
            else{
                $this->Flash->error("Incorrect username or password");
            }

        }
    }
    public function logout(){
        $this->Flash->success('You are logged out');
        $this->Auth->logout();
        return $this->redirect(['controller' => 'Admin', 'action' => 'login']);
    }

}
